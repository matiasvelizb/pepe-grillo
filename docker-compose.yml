services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: pepe-grillo-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: pepe_grillo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pepe-grillo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Discord Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pepe-grillo-bot
    restart: unless-stopped
    environment:
      # Discord
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      CLIENT_ID: ${CLIENT_ID}
      GUILD_ID: ${GUILD_ID}

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pepe_grillo
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Node
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount for logs if needed
      - ./logs:/app/logs

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
